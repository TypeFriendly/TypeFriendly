Title: File tags

----

In this chapter we have described all the tags that are available in the chapter files. Most of them takes a string as a value, but some of them also support a group of values (an array). We specify them in the following way:

~~~
TagName:
 - Value 1
 - Value 2
 - Value 3
~~~

Basic tags
----------

Title
:   a full title of the chapter (required tag)

ShortTitle
:   a shortened title of the chapter (for example, for use in URLs). If not set, the value is taken from **Title**.

SeeAlso
:   an array of identifiers to generate the "See also" section.

SeeAlsoExternal
:   like above, but allows to put external URLs. The address can be separated with a space from the URL text.

Status
:   shows a field named "Status" under the chapter title that can be used for various purposes.

Reference
:   allows to create a function reference (number of arguments, their type, returned value etc.). The reference itself is created manually.

Author
:   document author

VersionSince
:   which version this element is available since.

VersionTo
:   which version this element is available to.

Example:

~~~
Title: Function foo()
ShortTitle: foo()
Reference: void foo(int $a, int $b)
VersionSince: 1.0.0
VersionTo: 1.2.0
SeeAlso:
 - reference.functions.bar
 SeeAlsoExternal:
 - http://www.example.com/ A sample website
~~~

Object-oriented Programming
---------------------------

Those fields are used to mark the class dependencies in the objective code. You can set the base and derived classes, interfaces etc. TypeFriendly expects a chapter identifier that describes the required class/interface.

Visibility
:	the element visibility (for example *public*, *protected* etc.)

Extends
:   base class.

Implements
:   implemented interfaces.

ExtendedBy
:   derived classes.

Throws
:	the exceptions thrown.

Sample use:

~~~
Title: Class "foo"
Extends: reference.bar
Implements:
 - reference.foo-interface
 - reference.bar-interface
ExtendedBy:
 - reference.joe
Throws:
 - reference.foo-exception
~~~

In addition, there are alternative versions of those tags (except `Visibility`) that allow to specify the class/interface names manually. The tag name begins with an uppercase letter **e**: **EExtents**, **EImplements**, etc. Sample use:

~~~
Title: Class "foo"
EExtends: PDO
EImplements:
 - Countable
 - IteratorAggregate
~~~

Version control tags
--------------------

These tags are displayed in the generated output, if the configuration option `versionControlInfo` is enabled.

VCSKeywords
:	specified a place where the version control system keywords can be expanded.

Sample use:

~~~~
Title: A sample page
VCSKeywords: $Id$
~~~~

Now the version control systems, like Subversion, can expand their special keywords in the header, and moreover, if we enable one option, such information will be included in the generated output.

Tag proposals
-------------

The following fields are proposals that probably will be supported in the future releases of TypeFriendly.

MultiExtends
:   supports the multiple inheritance

Quote
:   adds a quote at the begin of the chapter

QuoteAuthor
:   quote author

AllowUserComments
:   for the on-line documentation generator. It is used to mark, whether this chapter allows user comments or not.

Appendix
:   appendix support.